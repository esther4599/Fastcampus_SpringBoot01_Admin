
** 코드 리팩토링**
외부 기능(API)은 수정하지 않고 내부 코드를 수정해 오류 발생확률을 낮추는 작업

===================================================================

1. JPA Enum 형태의 값 관리
entity의 status -> REGISTERED / UNREGISTERED / WAITING 값이 들어감

    1) java.model.enumclass/UserStatus
        => enum 객체

    2) entity/User
        => status String -> Enum으로 변경
           @Enumerated(EnumType.STRING)
           private UserStatus status;

    3) service ,request, response 모두 수정
       => UserStatus.~~

이런 경우 enum에 없는 값이 들어오면 error가 발생한다.

2. 상태 내용을 한글로 받는 방법
ItemApiLogisService -> response() : String statusTitle = item.getStatus().getTitle();

===================================================================

2. controller 추상화
= controller에 들어가던 반복되는 코드들 줄이기

controller/CRUDController
=> abstract class로 작성
=> protected CRUDInterface<Req,Res> baseService; 를 작성해 해당 class를
   상속 받는 클래스에서 따로 변수 설정해서 사용

ex)
    @Autowired
    private ItemApiLogicService itemApiLogicService;

    //클래스가 만들어질때 호출되어 의존성을 자동으로 설정
    @PostConstruct
    public void init(){
        this.baseService = itemApiLogicService;
    }

===================================================================

3. service 추상화
= 각 서비스에서 사용하는 해당 클래스의 repository

    1) service/BaseService
       => abstract class로 작성
       => BaseService<Req,Res,Entity> : class 이름
       => protected JpaRepository<Entity, Long> baseRepository;
          //각 객체의 Repository들이 상속받는 형태 그대로 작성
       => 각 service의 함수는 내용이 재정의되어야만 한다.
          따라서 본 클래스에서 함수를 재정의하지 않는다.

    2) 각 객체의 service에 적용시키기 (예시 ItemApiLogicService)
       => extends BaseService<ItemApiRequest, ItemApiResponse, Item>
       => 기존에 작성했던 아래의 코드 삭제
          private ItemRepository itemRepository;
       => itemRepository를 baseRepository로 대체

    3) controller/CRUDController 수정
       => CRUDController<Req, Res>를
          CRUDController<Req, Res, Entity>로 수정
       => protected BaseService<Req,Res> baseService 를
       @Autowired(required = false)
       protected BaseService<Req,Res,Entity> baseService 로 수정
       + class에 @Component 설정

       => 각 객체의 controller에 entity 입력

    4) 각 apiController 의 내용 모두 지우기
       => CRUDController에서 처리된다.
       **복습하면서 다시 확인하기**

===================================================================

수정된 코드 이해하기

예를 들어 /api/user post 요청
-> UserApiController에서 requestMapping에 의해 요청 접수
-> CRUDController[상속]에 의해 create 발생
-> baseService에 의해 UserApiLogicService[매개변수(generic)를 통해 구분됨]로 넘어감
