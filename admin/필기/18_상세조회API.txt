
본 프로젝트에서 중요한 기능

특정 사용자[user] 선택 -> 어떤 주문[order_group]을 했는지 확인
-> 주문 내[order_detail]역 확인 -> [item] 확인

지금까지 각 객체에 CRUD 기능을 제공해 FE 개발자가 알아서 필요한 데이터를 검색하고
가져갈 수 있었다.
최근에는 이러한 기능들을 graphicQL 등을 통해 쿼리 형태로 데이터를 검색할 수도 있다.

각 객체의 CRUD를 주 기능에 맞게 묶을 수 있다.

=====================================================

1. userOrderInfoApiResponse 작성
public class UserOrderInfoApiResponse {
    private UserApiResponse userApiResponse;
}

2. userApiResponse에
   private List<OrderGroupApiResponse> orderGroupApiResponseList;
   작성

   orderGroupApiReponse에
   private List<ItemApiResponse> itemApiResponseList;
   작성

3. UserApiController에 아래 코드 작성
    @Autowired
    UserApiLogicService userApiLogicService;

    @GetMapping("/{id}/orderInfo")
    public Header<UserOrderInfoApiResponse> orderInfo(@PathVariable Long id){
        return userApiLogicService.orderInfo(id);
    }

4. UserApiLogicService에 아래 코드 작성

    public Header<UserOrderInfoApiResponse> orderInfo(Long id) {
        //사용자
        User user = baseRepository.getOne(id);
        UserApiResponse userApiResponse = response(user);

        //orderGroup //response 접근제한자 public 으로 변경
        List<OrderGroup> orderGroupList = user.getOrderGroupList();
        List<OrderGroupApiResponse> orderGroupApiResponseList = orderGroupList.stream()
                .map( orderGroup -> {

                    OrderGroupApiResponse orderGroupApiResponse = orderGroupApiLogicService.response(orderGroup);

                    // item api response 만들어주기
                    List<ItemApiResponse> itemApiResponseList = orderGroup.getOrderDetailList().stream() //각 order group 별 detailList 가져오기
                            .map(detail -> detail.getItem()) //detail list의 각 detail 가져오기
                            .map( item -> itemApiLogicService.response(item)) //해당 detail에 있는 하나의 item 가져와 item response 로 변경
                            .collect(Collectors.toList());

                    orderGroupApiResponse.setItemApiResponseList(itemApiResponseList);
                    return orderGroupApiResponse;
                })
                .collect(Collectors.toList());

        userApiResponse.setOrderGroupApiResponseList(orderGroupApiResponseList);

        UserOrderInfoApiResponse userOrderInfoApiResponse = UserOrderInfoApiResponse.builder()
                .userApiResponse(userApiResponse).build();

        return Header.OK(userOrderInfoApiResponse);
    }

위에 코드 복잡하다.... 꼼꼼히 확인하기

실행) http://localhost:8080/api/user/1/orderInfo
=> 결과 매우 길다. 실행해서 확인해보기.